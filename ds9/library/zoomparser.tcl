
######
# Begin autogenerated taccle (version 1.2) routines.
# Although taccle itself is protected by the GNU Public License (GPL)
# all user-supplied functions are protected by their respective
# author's license.  See http://mini.net/tcl/taccle for other details.
######

namespace eval zoom {
    variable yylval {}
    variable table
    variable rules
    variable token {}
    variable yycnt 0

    namespace export yylex
}

proc zoom::YYABORT {} {
    return -code return 1
}

proc zoom::YYACCEPT {} {
    return -code return 0
}

proc zoom::yyclearin {} {
    variable token
    variable yycnt
    set token {}
    incr yycnt -1
}

proc zoom::yyerror {s} {
    puts stderr $s
}

proc zoom::setupvalues {stack pointer numsyms} {
    upvar 1 1 y
    set y {}
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        set y [lindex $stack $pointer]
        incr pointer
    }
}

proc zoom::unsetupvalues {numsyms} {
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        unset y
    }
}

array set zoom::table {
  9:262,target 12
  0:257 reduce
  0:258 reduce
  5:0,target 6
  0:260 reduce
  2:257 shift
  15:0,target 4
  0:261 reduce
  0:266,target 1
  2:264,target 8
  2:258 shift
  11:0 reduce
  2:260 shift
  4:257 reduce
  11:270 goto
  4:258 reduce
  0:263 reduce
  2:261 shift
  0:264 reduce
  3:257,target 13
  0:265 reduce
  2:263 shift
  15:0 reduce
  0:266 goto
  2:264 shift
  0:267 goto
  2:265 shift
  0:265,target 1
  2:263,target 7
  6:0,target 7
  16:0,target 12
  2:268 goto
  2:270 goto
  9:270,target 14
  9:269,target 13
  6:0 reduce
  0:264,target 1
  7:0,target 5
  12:0 reduce
  9:258,target 4
  10:0,target 2
  11:270,target 15
  4:258,target 14
  0:263,target 1
  2:261,target 6
  16:0 reduce
  9:257,target 3
  14:257 shift
  8:0,target 8
  3:0 reduce
  14:258 shift
  11:258,target 4
  1:0,target 0
  11:0,target 3
  4:257,target 14
  2:260,target 5
  2:270,target 11
  7:0 reduce
  14:270,target 16
  3:257 reduce
  3:258 reduce
  11:257,target 3
  13:0 reduce
  0:261,target 1
  2:258,target 4
  2:268,target 10
  14:270 goto
  12:0,target 10
  14:258,target 4
  9:257 shift
  9:258 shift
  9:262 shift
  0:260,target 1
  2:257,target 3
  4:0 reduce
  14:257,target 3
  3:0,target 13
  13:0,target 9
  8:0 reduce
  10:0 reduce
  9:270 goto
  9:269 goto
  0:258,target 1
  14:0 reduce
  4:0,target 14
  14:0,target 11
  11:257 shift
  11:258 shift
  0:257,target 1
  1:0 accept
  0:267,target 2
  2:265,target 9
  5:0 reduce
  3:258,target 13
}

array set zoom::rules {
  9,l 268
  11,l 269
  2,l 266
  6,l 268
  12,l 269
  3,l 268
  7,l 268
  13,l 270
  0,l 271
  4,l 268
  8,l 268
  10,l 269
  14,l 270
  1,l 267
  5,l 268
}

array set zoom::rules {
  5,dc 1
  0,dc 1
  12,dc 2
  8,dc 1
  3,dc 1
  10,dc 1
  6,dc 1
  1,dc 0
  13,dc 1
  9,dc 2
  4,dc 2
  11,dc 1
  7,dc 1
  2,dc 2
  14,dc 1
}

array set zoom::rules {
  13,line 37
  7,line 27
  10,line 32
  4,line 24
  1,line 19
  9,line 29
  12,line 34
  6,line 26
  3,line 23
  14,line 38
  8,line 28
  11,line 33
  5,line 25
  1,e 0
  2,line 20
}

proc zoom::yyparse {} {
    variable yylval
    variable table
    variable rules
    variable token
    variable yycnt

    set state_stack {0}
    set value_stack {{}}
    set token ""
    set accepted 0

    while {$accepted == 0} {
        set state [lindex $state_stack end]
        if {$token == ""} {
            set yylval ""
            set token [yylex]
            set buflval $yylval
	    if {$token>0} {
	        incr yycnt
            }
        }
        if {![info exists table($state:$token)]} {
            # pop off states until error token accepted
            while {[llength $state_stack] > 0 && \
                       ![info exists table($state:error)]} {
                set state_stack [lrange $state_stack 0 end-1]
                set value_stack [lrange $value_stack 0 \
                                       [expr {[llength $state_stack] - 1}]]
                set state [lindex $state_stack end]
            }
            if {[llength $state_stack] == 0} {
                yyerror "parse error"
                return 1
            }
            lappend state_stack [set state $table($state:error,target)]
            lappend value_stack {}
            # consume tokens until it finds an acceptable one
            while {![info exists table($state:$token)]} {
                if {$token == 0} {
                    yyerror "end of file while recovering from error"
                    return 1
                }
                set yylval {}
                set token [yylex]
                set buflval $yylval
            }
            continue
        }
        switch -- $table($state:$token) {
            shift {
                lappend state_stack $table($state:$token,target)
                lappend value_stack $buflval
                set token ""
            }
            reduce {
                set rule $table($state:$token,target)
                set ll $rules($rule,l)
                if {[info exists rules($rule,e)]} {
                    set dc $rules($rule,e)
                } else {
                    set dc $rules($rule,dc)
                }
                set stackpointer [expr {[llength $state_stack]-$dc}]
                setupvalues $value_stack $stackpointer $dc
                set _ $1
                set yylval [lindex $value_stack end]
                switch -- $rule {
                    1 { ProcessRealizeDS9 }
                    3 { Zoom $1 $1 }
                    4 { Zoom $1 $2 }
                    5 { PanZoomDialog }
                    6 { PanZoomDestroyDialog }
                    7 { Zoom 2 2 }
                    8 { Zoom .5 .5 }
                    10 { ZoomToFit }
                    11 { global zoom; set current(zoom) " $1 $1 "; ChangeZoom }
                    12 { global zoom; set current(zoom) " $1 $2 "; ChangeZoom }
                    13 { set _ $1 }
                    14 { set _ $1 }
                }
                unsetupvalues $dc
                # pop off tokens from the stack if normal rule
                if {![info exists rules($rule,e)]} {
                    incr stackpointer -1
                    set state_stack [lrange $state_stack 0 $stackpointer]
                    set value_stack [lrange $value_stack 0 $stackpointer]
                }
                # now do the goto transition
                lappend state_stack $table([lindex $state_stack end]:$ll,target)
                lappend value_stack $_
            }
            accept {
                set accepted 1
            }
            goto -
            default {
                puts stderr "Internal parser error: illegal command $table($state:$token)"
                return 2
            }
        }
    }
    return 0
}

######
# end autogenerated taccle functions
######

proc zoom::yyerror {msg} {
     puts stderr "$msg:"
     puts stderr "$zoom::yy_current_buffer"
     puts stderr [format "%*s" $zoom::index_ ^]
}
